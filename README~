

###############################################################################
David Morgens

Instructions for use

###############################################################################
# Note all scripts must be run from this folder

###############################################################################

# If the library is new, we need to make an bowtie index. What you'll need is
# the oligo order file, which should be a .csv file of the format:
# element_name, sequence

# Then run
python Scripts/makeIndices.py <screen_type> <oligo_file> <name>
# Where <screen_type> is a short, easy to remember name, while <name> should be
# a longer, more informative name. This will make the bowtie index for you

# First, we can make count files for each condition by aligning your FASTQ files
python Scripts/makeCounts.py <Start of your FASTQ files> <A name for your output> <Screen type>

# Where the <Screen Type> is the name of your library index.
# Some commonly used libraries are: Cas9-4, shRNA, mm-Cas9-10, mm-shRNA

# Then we can look at the distribution of your count files
python Scripts/plotDist.py <A name for your output> <untreated count file> <treated count file> -l <Label for untreated count file> <Label for treated count file>

# Then we can compare two count files as such:
python Scripts/analyzeCounts.py <untreated count file> <treated count file> <A name for your output> 

# Then we can add p-values for the MLE
python Scripts/addPermutations.py <results file> <# permutations> 

# You can make cloud plots, list as many genes as you like
python Scripts/plotGenes.py <result file> <A name for you output> <GENE1> <GENE2> <GENE3> ...

# Make histogram plots of your element distributions
python Scripts/plotHist.py <unctreated count file> <treated count files>

# And even compare duplicate screens
python Scripst/plotRep.py <results file 1> <results file 2> <Output name>

###############################################################################

See README in Scripts for more details

###############################################################################

Finding top guides and shRNA.
Kimberly Tsui

###############################################################################
Quick use:

python findGuides.py -f <text file with query genes> -g <gene1> -g <gene2> ... -out <output file>

###############################################################################
Quick explanation

<text file with query genes> describes the location of your text file with a list of query genes. One gene in each line. Recognizes gene symbol and gene ID. Case insensitive.

<geneX> represents gene symbol and gene IDs. Takes any number of genes and would be combined with genes in the text file.

<coutput file> is the location and file name you pick for your output files to be stored in.


###############################################################################
Optional arguments:

There's an option to choose number of guides and hairpins to be displayed:

-ng
This allows you to choose the number of guides. Default is 2. 

-nhp
This allows you to choose the number of hairpins. Default is 4. 

###############################################################################

Example:
python findGuides.py -f geneListExample.txt -g DHODH -g CoQ10B -out <output file>

###############################################################################

